version: 2
python_env: &python_env
  docker:
    - image: circleci/python:2.7-stretch-browsers

install_awscli: &install_awscli
  name: "Install awscli"
  command: |
    sudo pip install awscli --upgrade
install_deploysuite: &install_deploysuite
  name: Installation of install_deploysuite.
  command: |
    git clone --branch v1.4.1 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
    cp ./../buildscript/master_deploy.sh .
    cp ./../buildscript/buildenv.sh .
    cp ./../buildscript/awsconfiguration.sh .

# Instructions of deployment
deploy_steps: &deploy_steps
  - checkout
  - attach_workspace:
      at: ./workspace
  - run: *install_awscli
  - run: *install_deploysuite
  - setup_remote_docker
  - run: docker build -t ${APPNAME}:latest .
  - deploy:
      name: "Running Masterscript -  deploy tc-project-service "
      command: |
        ./awsconfiguration.sh $DEPLOY_ENV
        source awsenvconf
        ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar
        source buildenvvar
        ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${LOGICAL_ENV}-global-appvar,${LOGICAL_ENV}-${APPNAME}-appvar -i ${APPNAME}

jobs:
  test:
    docker:
      - image: circleci/node:8.9.4
      - image: circleci/postgres:9.6.2-alpine
        environment:
        - POSTGRES_USER: circle_test
        - POSTGRES_DB: circle_test
      - image: elasticsearch:2.3
      - image: rabbitmq:3-management
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "projects-api"
    steps:
      - checkout
      - run:
          name: "Install dependeency"
          command: |
              sudo apt update
              sudo apt install curl
              sudo apt install python-pip
      - run: *install_awscli
      - run: *install_deploysuite
      - setup_remote_docker
      - restore_cache:
          key: test-node-modules-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          key: test-node-modules-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: npm run lint
      - run:
          name: "Running Masterscript -  deploy tc-project-service "
          command: |
            ./awsconfiguration.sh $DEPLOY_ENV
            source awsenvconf
            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-testvar
            source buildenvvar
            npm run test
            rm -f buildenvvar
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deployProd:
    <<: *python_env
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "prod"
      APPNAME: "projects-api"
    steps: *deploy_steps

  deployDev:
    <<: *python_env
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "projects-api"
    steps: *deploy_steps

workflows:
  version: 2
  build:
    jobs:
      - test:
          context : org-global
      - deployDev:
          context : org-global
          requires:
            - test
          filters:
            branches:
              only: ['non-existing-develop']
      - deployProd:
          context : org-global
          requires:
            - test
          filters:
            branches:
              only: ['non-existing-master']
